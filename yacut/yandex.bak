import os
from pprint import pprint

import requests
from dotenv import load_dotenv

import urllib

API_HOST = 'https://cloud-api.yandex.net/'
API_VERSION = 'v1'
DISK_INFO_URL = f'{API_HOST}{API_VERSION}/disk/'
REQUEST_UPLOAD_URL = f'{API_HOST}{API_VERSION}/disk/resources/upload'
DOWNLOAD_LINK_URL = f'{API_HOST}{API_VERSION}/disk/resources/download'

load_dotenv()
DISK_TOKEN = os.environ.get('DISK_TOKEN')

AUTH_HEADERS = {
    'Authorization': f'OAuth {DISK_TOKEN}'
}

def upload_files(files_list):
    """
    Загружает несколько файлов на Яндекс.Диск
    
    Args:
        files_list: Список словарей с ключами:
                   - 'local_path': локальный путь к файлу
                   - 'remote_path': путь на Яндекс.Диске
    
    Returns:
        Dict: Словарь с путями {локальный_путь: путь_на_диске}
    """
    results = {}

    for file_info in files_list:
        local_path = file_info['local_path']
        remote_path = file_info['remote_path']

        if remote_path.endswith('/'):
            filename = os.path.basename(local_path)
            remote_path = remote_path + filename

        try:
            print(f"Загружаем файл: {local_path} -> {remote_path}")
            uploaded_path = upload_file(local_path, remote_path)
            results[local_path] = uploaded_path
            print(f"✓ Успешно: {uploaded_path}")

        except Exception as e:
            print(f"✗ Ошибка при загрузке {local_path}: {e}")
            results[local_path] = None

    return results

def upload_file(file_path, remote_path):
    """
    Загружает файл на Яндекс.Диск
    
    Args:
        file_path (str): Локальный путь к файлу
        remote_path (str): Путь на Яндекс.Диске
    
    Returns:
        str: Путь к загруженному файлу на Яндекс.Диске
    """

    payload = {
        'path': remote_path,  
        'overwrite': 'true'
    }
    
    response = requests.get(
        headers=AUTH_HEADERS,
        params=payload,
        url=REQUEST_UPLOAD_URL
    )
    response.raise_for_status()
    
    upload_url = response.json()['href']

    with open(file_path, 'rb') as file:
        response = requests.put(
            data=file,
            url=upload_url,
        )
    response.raise_for_status()

    location = response.headers.get('Location', '')
    if location:
        location = urllib.parse.unquote(location)
        location = location.replace('/disk', '')
        return location
    else:
        return remote_path

def get_download_url(remote_path):
    """
    Получает ссылку для скачивания файла с Яндекс.Диска
    
    Args:
        remote_path (str): Путь к файлу на Яндекс.Диске
    
    Returns:
        dict: Информация о ссылке для скачивания
    """
    response = requests.get(
        headers=AUTH_HEADERS,
        url=DOWNLOAD_LINK_URL, 
        params={'path': remote_path}
    )
    response.raise_for_status()
    return response.json()['href']

if __name__ == '__main__':
    # file_path = 'filename.txt'
    # remote_path = f'disk:/Приложения/YaCut/{file_path}'
    files_list = [{
        'local_path': 'file_1.txt',
        'remote_path': 'disk:/Приложения/YaCut/'
    }]
    print(upload_files(files_list))
