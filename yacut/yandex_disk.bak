import os
import asyncio
import aiohttp
from dotenv import load_dotenv

load_dotenv()

API_HOST = 'https://cloud-api.yandex.net/'
API_VERSION = 'v1'
REQUEST_UPLOAD_URL = f'{API_HOST}{API_VERSION}/disk/resources/upload'
DOWNLOAD_LINK_URL = f'{API_HOST}{API_VERSION}/disk/resources/download'

DISK_TOKEN = os.environ.get('DISK_TOKEN')
AUTH_HEADERS = {'Authorization': f'OAuth {DISK_TOKEN}'}


async def upload_files_to_yandex_disk(files, remote_folder='disk:/Приложения/YaCut/'):
    """
    Асинхронно загружает файлы на Яндекс.Диск
    
    Args:
        files: Список файлов из request.files
        remote_folder: Папка на Яндекс.Диске
    
    Returns:
        List: Список словарей с информацией о загруженных файлах
    """
    semaphore = asyncio.Semaphore(3)  # Ограничиваем одновременные загрузки
    
    async def upload_single_file(file):
        async with semaphore:
            return await _upload_single_file(file, remote_folder)
    
    tasks = [upload_single_file(file) for file in files]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # Фильтруем успешные результаты
    successful_uploads = []
    for result in results:
        if not isinstance(result, Exception) and result:
            successful_uploads.append(result)
    
    return successful_uploads


async def _upload_single_file(file, remote_folder):
    """
    Загружает один файл на Яндекс.Диск
    """
    filename = file.filename
    remote_path = f"{remote_folder}{filename}"
    
    # 1. Получаем URL для загрузки
    upload_url = await _get_upload_url(remote_path)
    
    # 2. Загружаем файл
    file_content = file.read()
    await _upload_file_data(upload_url, file_content)
    
    # 3. Получаем ссылку для скачивания
    download_url = await _get_download_url(remote_path)
    
    return {
        'filename': filename,
        'remote_path': remote_path,
        'download_url': download_url
    }


async def _get_upload_url(remote_path):
    """
    Получает URL для загрузки файла
    """
    async with aiohttp.ClientSession() as session:
        params = {'path': remote_path, 'overwrite': 'true'}
        
        async with session.get(
            REQUEST_UPLOAD_URL,
            headers=AUTH_HEADERS,
            params=params
        ) as response:
            response.raise_for_status()
            data = await response.json()
            return data['href']


async def _upload_file_data(upload_url, file_content):
    """
    Загружает данные файла на Яндекс.Диск
    """
    async with aiohttp.ClientSession() as session:
        async with session.put(upload_url, data=file_content) as response:
            response.raise_for_status()
            return response.headers.get('Location', '')


async def _get_download_url(remote_path):
    """
    Получает прямую ссылку для скачивания файла
    """
    async with aiohttp.ClientSession() as session:
        params = {'path': remote_path}
        
        async with session.get(
            DOWNLOAD_LINK_URL,
            headers=AUTH_HEADERS,
            params=params
        ) as response:
            response.raise_for_status()
            data = await response.json()
            return data['href']